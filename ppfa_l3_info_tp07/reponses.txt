1) 
En programmation orientée objet pour la conception des jeux vidéo, il est souvent courant de faire de l'héritage avec des classes pour gérer les relations entre les objets, et la façon dont ils doivent être gérés. Cela n'étant pas toujours pratique et flexible, on peut faire appel à un autre type d'architecture qui est le modèle ECS.

Dans ce modèle, chaque objet correspond à une entité ("Entity"), et chaque caractéristique que cet objet doit avoir est représentée par un composant ("Component"). Par exemple, une entité "bloc" pourrait avoir des composants comme "couleur" ou "collision". Finalement, le dernier élément de ce modèle est un système ("System") qui est associé à un (ou plusieurs) composant, et qui itère sur une liste comportant le composant en question de chaque entité concernée afin d'exécuter des actions dessus.

En application, un objet est une table de hachage où la clé correspond à l'ID de cet objet et où les valeurs correspondent aux composants de l'objets. Et tous les systèmes font partie de la "boucle de jeu", ils itèrent continument à travers leur table de hachage associée (parfois plusieurs composants nécessaires pour un même système), afin de récupérer les valeurs des composants pour les utiliser/les mettre à jour.

Ce modèle est plus intéressant qu'un modèle basé uniquement sur de l'héritage de classe, parce qu'il est beaucoup plus simple de créé une entité avec des composants spécifiques, ou de changer les composants d'une entité, alors qu'un arbre de classe est beaucoup plus rigide et ne permet pas forcément de créer ou modifier des classes sans danger.

2)
Le fichier move_system.ml est le module définissant un système qui gère le déplacement des entités du jeu. Il contient une fonction d'initialisation init, une valeur time qui a pour valeur par défaut 0, et une fonction update qui met à jour la position des entités passé en argument sous forme de liste, selon un certain delta_t dépendant du temps. Il doit aussi ouvrir le fichier src/component/components_defs.ml en début de fichier, car il a besoin d'utiliser les composants Position et Velocity de l'entité considérée.

Comme dit plus haut, ce module est un système et doit donc itérer sur une liste d'entités, ici celles pouvant se mouvoir. Dans ce cas précis, la liste ne contient qu'un seul élément qui est le joueur lui-même.

Durant la boucle de jeu dans src/game.ml qui se fait grâce à sa fonction run, la fonction play_game est appelée et celle-ci contient un appel à System.update_all. Celle-ci est définie dans src/ecs/system.ml, et elle a pour effet de demander à chaque système de mettre à jour ses composants. Entre autre, elle demande à l'instance de système move_S (créée et enregistrée dans system_defs.ml) d'utiliser sa fonction update pour mettre à jour la position de tous les objets ayant besoin de bouger, aka du joueur.

Plus exactement, lors de la mise à jour et de l'appel de update, la fonction fait la différence entre la valeur de time et la valeur de dt passée en argument, afin de savoir combien de temps/frame s'est écoulé depuis la dernière mise à jour. Puis, pour chaque entité à mettre à jour, elle récupère sa position et sa vélocité avec des get, et si la vitesse n'est pas nulle, alors elle utilise un set pour que la nouvelle valeur de la position soit égale à l'ancienne + (la vitesse de l'entité * la différence de temps).
